Работа с pipe. Часть 1

Для работы с pipe можно воспользоваться системными вызовами write() для записи и read() для чтения, как это делалось для записи в файл и чтения из файла. Разилчие в том, что пр чтении из файла информация не исчезает, а юайт, прочитанный из pipe удаляется
Для создания pipe используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дискриптор для чтения, а элемент с индексом 1 используется для записи.
Пример:
int fd[2];
pipe(fd);

Таблица файловых дискрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребенок моежт отправлять информацию через pipe любому из своих предков, так же, как и читать информацию, отправленную ими в pipe.
Pipe существует до тех пор, пока хотя бы один из его предков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу, или в процессе работы явно закрыл входной и выходной потоки.

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами

Для организации двуаправленной связи легче всего использовать два отдельных канала связи - pipe1 и pipe2. Pipe1 будет передавать информацию от процесса-родителя процессу-ребенку, а pipe2 - в обратном направлении.
Файловые дискрипторы разных pipe будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток pipe (close(fd1[0])), а также выходной поток pipe2 (close(fd2[1]))
Для дочернего процесса закрываем выходной поток pipe1 (close(fd1[])) и входной поток pipe2 (close(fd[]))
После записи информации в pipe родительским процессом выполняется чтение информации из pipe2, при этом дочерний процесс еще ничего не записал в pipe2. Поэтому родительский процесс при попытке чтения из pipe2 блокируется и ждет появления информации.
Информация от дочернего процесса в pipe2  появляется после того, как процесс-ребенок прочитает информацию из pipe1.
Поэтому дочерний процесс заканчивает работу раньше, чем родительский процесс прочитает информацию от него из pipe2.

Результат выполнения программы pr009r2.out:

Читаем строку, отправленную процессом-ребенком: ...
Строка, прочитанная дочерним процессом: Информация для дочернего процесса от родителя
Процесс ребенок завершил работу
Прочитанная родителем строка: Информация для родительского процесса от ребенка
Процесс родитель завершил работу 
